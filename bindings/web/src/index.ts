export { Runtime } from "./Runtime";
export { CapabilityType, Builder } from "./facade";

import { Tensor } from "@tensorflow/tfjs-core";
import { Builder, InputDescription } from "./facade";
import { TensorFlowModel, TensorFlowLiteMimeType } from "./builtin";
import Shape from "./Shape";

/// Something which consumes outputs generated by the Rune.
export interface Output {
    consume(data: Uint8Array): void;
}

/**
 * Inputs provided by the application.
  */
export interface Capability {
    generate(dest: Uint8Array): void;
    setParameter(name: string, value: number): void;
}

export interface Imports {
    createOutput(type: number): Output;
    createCapability(type: number): Capability;
    createModel(mimetype: string, model: ArrayBuffer): Promise<Model>;
    log(message: string): void;
}

export interface Model {
    transform(inputArray: Uint8Array[], inputDimensions: Shape[], outputArray: Uint8Array[], outputDimensions: Shape[]): void;
}

/**
 * Use a high level builder API to initialize the Rune runtime.
 */
export function builder(): Builder {
    return new Builder()
        .withModelHandler(TensorFlowLiteMimeType, TensorFlowModel.loadTensorFlowLite);
}
