export { Runtime } from "./Runtime";
import { TensorFlowModel, RandomCapability, TensorFlowLiteMimeType } from "./builtin";
import Shape from "./Shape";

export const KnownCapabilities: Record<number, string> = {
    1: "rand",
    2: "sound",
    3: "accel",
    4: "image",
    5: "raw",
};

export const KnownOutputs: Record<number, string> = {
    1: "serial",
};

/// Something which consumes outputs generated by the Rune.
export interface Output {
    consume(data: Uint8Array): void;
}

/**
 * Inputs provided by the application.
  */
export interface Capability {
    generate(dest: Uint8Array, id: number): void;
}

export interface Imports {
    outputs: Record<number, () => Output>;
    capabilities: Record<number, (capabilityType: number) => Capability>;
    modelHandlers: Record<string, (model: ArrayBuffer) => Promise<Model>>;
}

export interface Model {
    transform(inputArray: Uint8Array[], inputDimensions: Shape[], outputArray: Uint8Array[], outputDimensions: Shape[]): void;
}

export function defaultImports(): Imports {
    const [randId, _] = Object.entries(KnownCapabilities).find(([_, capName]) => capName == "rand")!;

    return {
        outputs: {},
        capabilities: {
            [randId]: () => new RandomCapability(),
        },
        modelHandlers: {
            // We provide support for plain TensorFlow Lite models by default
            [TensorFlowLiteMimeType]: (model) => TensorFlowModel.loadTensorFlowLite(model),
        },
    };
}

