// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to the Rune runtime.
class Rune {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Rune(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Rune.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int8> rune_error_to_string(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_to_string(
      error,
    );
  }

  late final _rune_error_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<Error>)>>('rune_error_to_string');
  late final _rune_error_to_string = _rune_error_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<Error>)>();

  ffi.Pointer<ffi.Int8> rune_error_backtrace(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_backtrace(
      error,
    );
  }

  late final _rune_error_backtracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<Error>)>>('rune_error_backtrace');
  late final _rune_error_backtrace = _rune_error_backtracePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<Error>)>();

  void rune_error_free(
    ffi.Pointer<Error> error,
  ) {
    return _rune_error_free(
      error,
    );
  }

  late final _rune_error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Error>)>>(
          'rune_error_free');
  late final _rune_error_free =
      _rune_error_freePtr.asFunction<void Function(ffi.Pointer<Error>)>();

  ffi.Pointer<Image> rune_image_new() {
    return _rune_image_new();
  }

  late final _rune_image_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Image> Function()>>(
          'rune_image_new');
  late final _rune_image_new =
      _rune_image_newPtr.asFunction<ffi.Pointer<Image> Function()>();

  ffi.Pointer<Image> rune_image_new_with_defaults() {
    return _rune_image_new_with_defaults();
  }

  late final _rune_image_new_with_defaultsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Image> Function()>>(
          'rune_image_new_with_defaults');
  late final _rune_image_new_with_defaults = _rune_image_new_with_defaultsPtr
      .asFunction<ffi.Pointer<Image> Function()>();

  ffi.Pointer<Error> rune_image_register_model_handler(
    ffi.Pointer<Image> image,
    ffi.Pointer<ffi.Int8> mimetype,
    int mimetype_len,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        create_model,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free,
  ) {
    return _rune_image_register_model_handler(
      image,
      mimetype,
      mimetype_len,
      user_data,
      create_model,
      free,
    );
  }

  late final _rune_image_register_model_handlerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<Error> Function(
                      ffi.Pointer<Image>,
                      ffi.Pointer<ffi.Int8>,
                      uintptr_t,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
          'rune_image_register_model_handler');
  late final _rune_image_register_model_handler =
      _rune_image_register_model_handlerPtr.asFunction<
          ffi.Pointer<Error> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<Error> rune_image_register_capability_handler(
    ffi.Pointer<Image> image,
    int capability_type,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        create_capability,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free,
  ) {
    return _rune_image_register_capability_handler(
      image,
      capability_type,
      user_data,
      create_capability,
      free,
    );
  }

  late final _rune_image_register_capability_handlerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<Error> Function(
                      ffi.Pointer<Image>,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
          'rune_image_register_capability_handler');
  late final _rune_image_register_capability_handler =
      _rune_image_register_capability_handlerPtr.asFunction<
          ffi.Pointer<Error> Function(
              ffi.Pointer<Image>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<Error> rune_image_register_output_handler(
    ffi.Pointer<Image> image,
    int output_type,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        create_output,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        free,
  ) {
    return _rune_image_register_output_handler(
      image,
      output_type,
      user_data,
      create_output,
      free,
    );
  }

  late final _rune_image_register_output_handlerPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<Error> Function(
                      ffi.Pointer<Image>,
                      ffi.Uint32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
          'rune_image_register_output_handler');
  late final _rune_image_register_output_handler =
      _rune_image_register_output_handlerPtr.asFunction<
          ffi.Pointer<Error> Function(
              ffi.Pointer<Image>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  void rune_image_free(
    ffi.Pointer<Image> img,
  ) {
    return _rune_image_free(
      img,
    );
  }

  late final _rune_image_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'rune_image_free');
  late final _rune_image_free =
      _rune_image_freePtr.asFunction<void Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Error> rune_runtime_create(
    ffi.Pointer<ffi.Int8> wasm,
    int wasm_len,
    ffi.Pointer<Image> image,
    ffi.Pointer<ffi.Pointer<Runtime>> runtime,
  ) {
    return _rune_runtime_create(
      wasm,
      wasm_len,
      image,
      runtime,
    );
  }

  late final _rune_runtime_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Error> Function(
              ffi.Pointer<ffi.Int8>,
              uintptr_t,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Pointer<Runtime>>)>>('rune_runtime_create');
  late final _rune_runtime_create = _rune_runtime_createPtr.asFunction<
      ffi.Pointer<Error> Function(ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<Image>, ffi.Pointer<ffi.Pointer<Runtime>>)>();

  ffi.Pointer<Error> rune_runtime_call(
    ffi.Pointer<Runtime> runtime,
  ) {
    return _rune_runtime_call(
      runtime,
    );
  }

  late final _rune_runtime_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Error> Function(
              ffi.Pointer<Runtime>)>>('rune_runtime_call');
  late final _rune_runtime_call = _rune_runtime_callPtr
      .asFunction<ffi.Pointer<Error> Function(ffi.Pointer<Runtime>)>();

  void rune_runtime_free(
    ffi.Pointer<Runtime> runtime,
  ) {
    return _rune_runtime_free(
      runtime,
    );
  }

  late final _rune_runtime_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Runtime>)>>(
          'rune_runtime_free');
  late final _rune_runtime_free =
      _rune_runtime_freePtr.asFunction<void Function(ffi.Pointer<Runtime>)>();
}

class Error extends ffi.Opaque {}

class Image extends ffi.Opaque {}

class Runtime extends ffi.Opaque {}

typedef uintptr_t = ffi.Uint64;
