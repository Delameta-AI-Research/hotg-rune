runefile = { SOI ~ (statement | newline)* ~ EOI }
statement = { from | capability | proc_block | model | run | out }

// Punctuation

newline = _{ "\r\n" | "\n" }
WHITESPACE = _{ " " | "\t" | ( "\\" ~ newline) }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

// Primitives

ident = @{ alpha_ident | underscore_ident }
alpha_ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
underscore_ident = @{ "_" ~ (ASCII_ALPHANUMERIC | "_")+ }

string  = @{ "\"" ~ inner ~ "\"" }
inner   = @{ (!("\"" | "\\" | "\u{0000}" | "\u{001F}") ~ ANY)* ~ (escape ~ inner)? }
escape  = @{ "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "\\" | unicode | NEWLINE)? }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} | "U" ~ ASCII_HEX_DIGIT{8} }

integer = @{ number | "-" ~ "0"* ~ '1'..'9' ~ number? }
number = @{ ASCII_DIGIT+ }

float = @{ (float_mantissa ~ float_exponent?) | (integer ~ float_exponent) }
float_mantissa = @{ integer ~ "." ~ number? }
float_exponent = @{ ("e" | "E") ~ integer }

literal = { float | integer | string }

// Paths to external resources

path = ${ path_body ~ ("@" ~ path_version)? ~ ("#" ~ path_segments)? }
path_body = @{ scheme? ~ path_segments }
path_segments = @{ path_segment ~ ("/" ~ path_segment)* }
path_segment = @{ (ASCII_ALPHANUMERIC | "-" | "_" | "." | "%" | "&")+ }
scheme = @{ ASCII_ALPHANUMERIC+ ~ "://" }
path_version = { (ASCII_ALPHANUMERIC | ".")+ }

// Types

ty = { inferred_type | type_with_dimensions }
inferred_type = @{ "_" }
dimensions = { "[" ~ number ~ ("," ~ number)* ~ "]" }
type_with_dimensions = { ident ~ dimensions? }

// Arguments

arguments = { argument* }
argument = ${ arg_name ~  ("=" | WHITESPACE+) ~ arg_value }
arg_name = { ("--" ~ long_arg | "-" ~ short_arg) }
short_arg = { ASCII_ALPHA }
long_arg = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-" | "_")* }
arg_value = _{ arg_list | literal | arg_list_item }
arg_list = ${ arg_list_item ~ ("," ~ arg_list_item)+ }
arg_list_item = { (!WHITESPACE ~ !newline ~ !"\"" ~ !"," ~ ANY)+ }

// FROM runicos/base
from = { "FROM" ~ path }

// CAPABILITY<I32> rand RAND --n 1
capability = {
  "CAPABILITY" ~ "<" ~ ty ~ ">" ~ capability_kind ~ capability_description ~ arguments
}
capability_kind = _{ ident }
capability_description = _{ ident }

// PROC_BLOCK<_,_> mod360 hotg-ai/pb-mod --modulo 100
proc_block = { "PROC_BLOCK" ~ "<" ~ ty ~ "," ~ ty ~ ">" ~ ident ~ path ~ arguments }

// MODEL<_,_> sine ./sinemodel.tflite --input 1,1 --output 1,1
model = {
  "MODEL" ~ "<" ~ ty ~ "," ~ ty ~ ">" ~ ident ~ model_filename ~ arguments
}
model_filename = @{ path_segment ~ ("/" ~ path_segment)* }

// RUN rand mod360 sine
run = { "RUN" ~ ident+ }

// OUT serial
out = { "OUT" ~ ident }
