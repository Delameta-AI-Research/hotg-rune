//! Automatically generated by rune. DO NOT EDIT!

#![no_std]
#![feature(alloc_error_handler)]

extern crate alloc;

#[allow(unused_imports)]
use runic_types::{
    wasm32::{intrinsics, Model, Random, Serial},
    Source, Sink, Transform, debug,
};
use alloc::boxed::Box;

static mut PIPELINE: Option<Box<dyn FnMut()>> = None;

#[no_mangle]
pub extern "C" fn _manifest() -> u32 {
    let mut accelerometer = runic_types::wasm32::Random::default();
    let mut gesture = Model::load(include_bytes!("gesture.tflite"));
    let mut normalize = normalize::Normalize::default();
    let mut label = ohv_label::OhvLabel::default()
        .with_labels(["Wing", "Ring", "Slope", "Unknown"])
    ;
    let mut serial = Serial::default();

    let pipeline = move || {
        let data: [f32; 384] = accelerometer.generate();
        let data: [f32; 384] = normalize.transform(data);
        let data: [f32; 4] = gesture.transform(data);
        let data = label.transform(data);
        
        serial.consume(data);
    };

    unsafe {
        PIPELINE = Some(Box::new(pipeline));
    }

    1
}

#[no_mangle]
pub extern "C" fn _call(
    _capability_type: i32,
    _input_type: i32,
    _capability_idx: i32,
) -> i32 {
    unsafe {
        let pipeline = PIPELINE.as_mut()
            .expect("The rune hasn't been initialized");
        pipeline();

        0
    }
}
