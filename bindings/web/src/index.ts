export { Runtime } from "./Runtime";
import Builder from "./Builder";
import { TensorFlowModel, RandomCapability, TensorFlowLiteMimeType } from "./builtin";
import Shape from "./Shape";

/// Something which consumes outputs generated by the Rune.
export interface Output {
    consume(data: Uint8Array): void;
}

/**
 * Inputs provided by the application.
  */
export interface Capability {
    generate(dest: Uint8Array): void;
    setParameter(name: string, value: number): void;
}

export interface Imports {
    createOutput(type: number): Output;
    createCapability(type: number): Capability;
    createModel(mimetype: string, model: ArrayBuffer): Promise<Model>;
    log(message: string): void;
}

export interface Model {
    transform(inputArray: Uint8Array[], inputDimensions: Shape[], outputArray: Uint8Array[], outputDimensions: Shape[]): void;
}

export function builder(): Builder {
    return new Builder()
        .withCapability("rand", () => new RandomCapability())
        .withModelHandler(TensorFlowLiteMimeType, (model) => TensorFlowModel.loadTensorFlowLite(model));
}
