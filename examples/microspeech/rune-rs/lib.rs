//! Automatically generated by rune. DO NOT EDIT!

#![no_std]
#![feature(alloc_error_handler)]

extern crate alloc;

#[allow(unused_imports)]
use runic_types::{
    wasm32::{intrinsics, Model, Random, Serial},
    Source, Sink, Transform, debug,
};
use alloc::boxed::Box;

static mut PIPELINE: Option<Box<dyn FnMut()>> = None;

#[no_mangle]
pub extern "C" fn _manifest() -> u32 {
    let mut audio = runic_types::wasm32::Sound::default();
    audio
        .set_parameter("samples", 150)
        .set_parameter("sample_size_ms", 1500)
        .set_parameter("hz", 16000);
    let mut model = Model::load(include_bytes!("model.tflite"));
    let mut fft = fft::Fft::default();
    let mut label = ohv_label::OhvLabel::default()
        .with_labels(["unknown", "silence", "yes", "no"])
    ;
    let mut serial = Serial::default();

    let pipeline = move || {
        let data: [i16; 24000] = audio.generate();
        runic_types::debug!("audio => {:?}", data);
        let data: [u8; 1960] = fft.transform(data);
        runic_types::debug!("fft => {:?}", data);
        let data: [u8; 4] = model.transform(data);
        runic_types::debug!("model => {:?}", data);
        let data: &'static str = label.transform(data);
        runic_types::debug!("label => {:?}", data);
        
        serial.consume(data);
    };

    unsafe {
        PIPELINE = Some(Box::new(pipeline));
    }

    1
}

#[no_mangle]
pub extern "C" fn _call(
    _capability_type: i32,
    _input_type: i32,
    _capability_idx: i32,
) -> i32 {
    unsafe {
        let pipeline = PIPELINE.as_mut()
            .expect("The rune hasn't been initialized");
        pipeline();

        0
    }
}
