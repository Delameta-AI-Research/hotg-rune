//! Automatically generated by rune. DO NOT EDIT!

#![no_std]
#![feature(alloc_error_handler)]

extern crate alloc;

use runic_types::{*, wasm32::*};
use alloc::boxed::Box;

static mut PIPELINE: Option<Box<dyn FnMut()>> = None;

#[no_mangle]
pub extern "C" fn _manifest() -> u32 {
    {{#each capabilities~}}
    let mut {{name}} = {{type}}::default();
    {{~#if parameters}}
    {{name}}
    {{~#each parameters}}
        .set_parameter("{{name}}", {{value}})
    {{~/each~}};
    {{~/if~}}
    {{~/each~}}

    {{~#each models}}
    let mut {{this}} = Model::load(include_bytes!("{{this}}.tflite"));
    {{~ /each~}}

    {{~#each proc_blocks}}
    let mut {{name}} = {{type}}::default()
    {{~#each parameters}}
        .with_{{name}}({{value}})
    {{/each~}};
    {{~ /each~}}

    {{~#each outputs}}
    let mut {{name}} = {{type}}::default();
    {{~/each}}

    let pipeline = move || {
        {{#each pipeline~}}
        {{~#if first~}}
        let data{{#if output_type}}: {{output_type}}{{/if}} = {{name}}.generate();
        runic_types::debug!("{{name}} => {:?}", data);
        {{else}}{{#if last}}
        {{name}}.consume(data);
        {{~else~}}
        let data{{#if output_type}}: {{output_type}}{{/if}} = {{name}}.transform(data);
        runic_types::debug!("{{name}} => {:?}", data);
        {{/if}}{{/if~}}{{~/each}}
    };

    unsafe {
        PIPELINE = Some(Box::new(pipeline));
    }

    1
}

#[no_mangle]
pub extern "C" fn _call(
    _capability_type: i32,
    _input_type: i32,
    _capability_idx: i32,
) -> i32 {
    unsafe {
        let pipeline = PIPELINE.as_mut()
            .expect("The rune hasn't been initialized");
        pipeline();

        0
    }
}
