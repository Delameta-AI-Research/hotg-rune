#![no_std]
#![feature(alloc_error_handler)]

extern crate alloc;

#[allow(unused_imports)]
use runic_types::{
    wasm32::{intrinsics, Model, Random, Serial},
    Source, Sink, Transform, debug,
};
use alloc::boxed::Box;

static mut PIPELINE: Option<Box<dyn FnMut()>> = None;

#[no_mangle]
pub extern "C" fn _manifest() -> u32 {
    unsafe {
        {{#each capabilities~}}
        {{#if (eq kind "RAND")}}
        let {{name}} = Random::new();
        {{/if}}
        {{~/each~}}

        {{~#each models}}
        let {{this}} = Model::load(include_bytes!("{{this}}.tflite"));
        {{~ /each~}}

        {{~#each proc_blocks}}
        let {{name}} = {{type}}::default();
        {{~ /each~}}

        {{~#each outputs}}
        let {{name}} = {{type}}::default();
        {{~/each}}

        PIPELINE = Some(Box::new(|| {
            {{#each pipeline~}}
            {{~#if first~}}
            let data = {{name}}.generate();
            {{else}}{{#if last}}
            {{name}}.consume(data);
            {{~else~}}
            let data = {{name}}.transform(data);
            {{/if}}{{/if~}}{{~/each}}
        }));
    }

    1
}

#[no_mangle]
pub extern "C" fn _call(
    capability_type: i32,
    input_type: i32,
    capability_idx: i32,
) -> i32 {
    unsafe {
        let pipeline = PIPELINE.as_mut()
            .expect("The rune hasn't been initialized");
        pipeline();

        0
    }
}
